openapi: 3.0.0
info:
  title: Xopix Order Service API
  version: 1.0.0
  description: API for managing basic orders within Xopix E-commerce.
servers:
  - url: http://localhost:8082/api/orders # Base URL for the Order Service
    description: Local development server
  - url: https://api.xopix.com/orders # Example production URL (via API Gateway)
    description: Production API Gateway endpoint for Order Service

tags:
  - name: Orders
    description: Order management operations

paths:
  /orders:
    post:
      summary: Create a new order from a shopping cart
      operationId: createOrder
      tags:
        - Orders
      security:
        - BearerAuth: [] # Requires authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreationRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Invalid request payload, cart empty, or other business rule violation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Cart not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{orderId}:
    get:
      summary: Get order details by ID
      operationId: getOrderById
      tags:
        - Orders
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID of the order to retrieve
          schema:
            type: string
            format: uuid # Assuming UUID for order IDs internally
      security:
        - BearerAuth: [] # Requires authenticated user (and ownership or Admin role)
      responses:
        '200':
          description: Order details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User does not own this order or insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/user/{userId}:
    get:
      summary: Get all orders for a specific user
      operationId: getOrdersByUserId
      tags:
        - Orders
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user whose orders to retrieve
          schema:
            type: string
            format: uuid # Assuming UUID for user IDs internally
        - name: page
          in: query
          description: Page number (0-indexed)
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of orders per page
          schema:
            type: integer
            default: 20
        - name: sortBy
          in: query
          description: Field to sort by
          schema:
            type: string
            default: createdAt
        - name: sortDir
          in: query
          description: Sort direction (asc or desc)
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      security:
        - BearerAuth: [] # Requires authenticated user (and ownership or Admin role)
      responses:
        '200':
          description: List of orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User does not own these orders or insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    OrderCreationRequest:
      type: object
      required:
        - cartId
        - shippingAddress
        - paymentMethodId # Placeholder, full payment integration later
      properties:
        cartId:
          type: string
          format: uuid
          description: The ID of the shopping cart to convert to an order.
          example: "c1a2b3c4-d5e6-7890-1234-567890abcdef"
        shippingAddress:
          type: object
          $ref: '#/components/schemas/Address' # Reusing Address schema
        paymentMethodId:
          type: string
          description: Placeholder for selected payment method (e.g., Stripe token, card ID)
          example: "pm_card_visa"

    Address:
      type: object
      required:
        - street
        - city
        - zipCode
        - country
      properties:
        street:
          type: string
          example: "123 Main St"
        city:
          type: string
          example: "Anytown"
        state:
          type: string
          example: "Anystate"
        zipCode:
          type: string
          example: "12345"
        country:
          type: string
          example: "USA"

    OrderResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the order
          example: "o1a2b3c4-d5e6-7890-1234-567890abcdef"
        userId:
          type: string
          format: uuid
          description: The ID of the user who placed the order
          example: "u1a2b3c4-d5e6-7890-1234-567890abcdef"
        status:
          type: string
          enum: [PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED, FAILED]
          description: Current status of the order
          example: PENDING
        totalAmount:
          type: number
          format: float
          description: Total amount of the order
          example: 129.98
        shippingAddress:
          type: object
          $ref: '#/components/schemas/Address'
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemResponse'
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the order was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the order was last updated

    OrderItemResponse:
      type: object
      properties:
        productId:
          type: string
          format: uuid
          description: ID of the product
          example: "p1a2b3c4-d5e6-7890-1234-567890abcdef"
        productName:
          type: string
          description: Name of the product at the time of order
          example: Xopix Wireless Earbuds
        quantity:
          type: integer
          format: int32
          description: Quantity of the product ordered
          example: 2
        price:
          type: number
          format: float
          description: Unit price of the product at the time of order
          example: 99.99
        subtotal:
          type: number
          format: float
          description: Quantity * Price
          example: 199.98

    ErrorResponse: # Reusing ErrorResponse schema from other services for consistency
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: "2023-10-27T10:00:00.000Z"
        status:
          type: integer
          example: 404
        error:
          type: string
          example: Not Found
        message:
          type: string
          example: Order with ID o1b2c3d4-e5f6-7890-1234-567890abcdef not found.
        path:
          type: string
          example: /api/orders/o1b2c3d4-e5f6-7890-1234-567890abcdef

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: """JWT Authorization header with Bearer scheme. Example: "Authorization: Bearer {token}"